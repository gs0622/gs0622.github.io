---
layout: post
title: "Git FAQ"
date: 2014-08-29 13:54:49 +0800
comments: true
categories: 
---

I write this FAQ list for git problems, usually you can google on stackoverflow or somewhere...

## Change user.name/email on local repository
Sometimes you want to have different user name and email to override git global setting.

    $ git config user.name harrypan
    $ git config user.email gs0622@gmail.com

Also, you can review it in local git config

    $ tail -3 .git/config
    [user]
        name = harrypan
        email = harrypan

## Rollback remote git repository
Sometimes you decide to rollback couple commits in remote without revert then push, you can try below tips, however it assumes your local and remote repository are synced.
#### Hard reset commits in local repository
    $ git reset --hard HEAD~n
Here 'n' refer to commit numbers you want to reset, in case one or two commits you can also use HEAD or HEAD^.
#### Force push onto remote
    $ git push -f

## GitHub credential helper
Says you have repositories on GitHub, default/preferred protocol is https, you might be annoyed every push need to input user/password, using credential helper could help you for a period not need credential input

#### With git 1.7.9 and later
    $ git config --global credential.helper cache
Here its default timeout is 15 min, or you can select a longer time suggested by GitHub help

    $ git config --global credential.helper "cache --timeout=3600"

#### With git before 1.7.9, or any version
I don't prefer those ways for personal flavor, you can refer to [Is there a way to skip password typing when using https:// github](http://stackoverflow.com/questions/5343068/is-there-a-way-to-skip-password-typing-when-using-https-github)

## Mirror a repository
Base on [GitHub Help: Duplicating a repository](https://help.github.com/articles/duplicating-a-repository), here is my example to mirror [procps-ng](https://gitorious.org/procps) from gitorious onto my github

    $ # Make a *bare* clone of the repository
    $ git clone --bare https://gitorious.org/procps/procps.git
    # mirror-push onto existing github repository through github UI
    $ cd procps.git/
    $ git push --mirror https://github.com/gs0622/procps
    # clone again through *your* own repository
    $ cd ..
    # git clone https://github.com/gs0622/procps

## Git 2.0 global variable push.default
You might be confusing at below warning after updated git to 2.0+
<pre><code>
$ git push
warning: push.default is unset; its implicit value has changed in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)
</code></pre>
The thing is since git 2.0 adding new global variable to define **git-push**  behavior.
Grab the description from [git-config menu](https://www.kernel.org/pub/software/scm/git/docs/git-config.html)
<pre><code>
push.default
Defines the action git push should take if no refspec is given on the command line, no refspec is configured in the remote, and no refspec is implied by any of the options given on the command line. Possible values are:

nothing - do not push anything.

matching - push all branches having the same name in both ends. This is for those who prepare all the branches into a publishable shape and then push them out with a single command. It is not appropriate for pushing into a repository shared by multiple users, since locally stalled branches will attempt a non-fast forward push if other users updated the branch. 
This is currently the default, but Git 2.0 will change the default to simple.

upstream - push the current branch to its upstream branch. With this, git push will update the same remote ref as the one which is merged by git pull, making push and pull symmetrical. See "branch.<name>.merge" for how to configure the upstream branch.

simple - like upstream, but refuses to push if the upstream branchâ€™s name is different from the local one. This is the safest option and is well-suited for beginners. It will become the default in Git 2.0.

current - push the current branch to a branch of the same name.
</code></pre>
In a nuts shell, set **push.default** as **simple** might be a good start, more conservative to avoid beginners making mistake.
