<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Harry's Graffiti]]></title>
  <link href="http://gs0622.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://gs0622.github.io/"/>
  <updated>2015-01-21T18:47:57+08:00</updated>
  <id>http://gs0622.github.io/</id>
  <author>
    <name><![CDATA[Harry Pan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NTP Behind Proxy]]></title>
    <link href="http://gs0622.github.io/blog/2015/01/21/ntp-behind-proxy/"/>
    <updated>2015-01-21T17:32:43+08:00</updated>
    <id>http://gs0622.github.io/blog/2015/01/21/ntp-behind-proxy</id>
    <content type="html"><![CDATA[<p>Adventitiously I observed my desktop cannot do NTP update, suspecting
it is because of proxy. I did some triage then google.</p>

<p>Credit/refer to
<a href="http://superuser.com/questions/307158/how-to-use-ntpdate-behind-a-proxy">How to use ntpdate behind a proxy?</a></p>

<!--more-->


<p>By triage, switch off NTP, modify time, then turn on NTP via system date/time setting is not working
    $ dmesg | tail
    [1328911.777687] systemd-timedated[8385]: Set NTP to disabled
    [1328918.627650] systemd-timedated[8385]: Changed local time to Wed Jan 21 17:26:35 2015
    [1328953.967353] systemd-timedated[8385]: Set NTP to enabled</p>

<p>Turns out there is wonderful conjuration using http header
    $ sudo date -s &ldquo;$(curl -sD - google.com | grep ^Date: | cut -d&#8217; &lsquo; -f3-6)Z&rdquo;
    Wed Jan 21 18:45:45 CST 2015</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Realtek Rt8192cu Linux Driver]]></title>
    <link href="http://gs0622.github.io/blog/2014/10/01/realtek-rt8192cu-linux-driver/"/>
    <updated>2014-10-01T17:52:04+08:00</updated>
    <id>http://gs0622.github.io/blog/2014/10/01/realtek-rt8192cu-linux-driver</id>
    <content type="html"><![CDATA[<p>I got ASUS Wireless-N USB dongle couple months ago, thought it is supported in Linux, however I have no luck to enable it no matter on Ubuntu 12.04 nor 14.04 LTS.</p>

<!--more-->


<p>As the box cover claimed Linux supported, someday I put the dongle on my Ubuntu machines then found it has no reaction while plugged in.</p>

<p><img src="/images/20141001_asus_box.jpg" width="300" height="200" title="asus box" >
<img src="/images/20141001_asus_dongle.jpg" width="300" height="200" title="asus dongle" ></p>

<p>I dug into both CD-ROM and Realtek website, well, driver source is quite old, even not able to build in new kernel (3.13+)</p>

<p>Occasionally I found there are lovely maintainers <a href="https://github.com/dz0ny">Janez Troha</a> and <a href="https://github.com/skeller">Stefan Keller</a>, they did great jobs hosting a project maintaining rt8192cu driver, and further more applied <a href="http://en.wikipedia.org/wiki/Dynamic_Kernel_Module_Support">DKMS</a> method.</p>

<p>Here is short note to enable the Wifi dongle by <a href="https://github.com/dz0ny/rt8192cu">Realtek driver for 8192cu / 8188cu devices</a></p>

<h4>Prerequisites</h4>

<pre><code>$ sudo apt-get install git build-essential linux-headers-generic dkms
</code></pre>

<h4>Get driver source</h4>

<pre><code>$ git clone https://github.com/dz0ny/rt8192cu.git --depth 1
$ cd rt8192cu
</code></pre>

<h4>Easy install (DKMS)</h4>

<pre><code>$ sudo make dkms
</code></pre>

<h4>Hard install (traditional, non-DKMS)</h4>

<pre><code>$ sudo make install
</code></pre>

<p>-enjoy</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Customized Kernel]]></title>
    <link href="http://gs0622.github.io/blog/2014/09/19/build-customized-kernel/"/>
    <updated>2014-09-19T09:28:33+08:00</updated>
    <id>http://gs0622.github.io/blog/2014/09/19/build-customized-kernel</id>
    <content type="html"><![CDATA[<p>A quick note to build your customized Linux kernel on Ubuntu system.
Below are refer to <a href="https://wiki.ubuntu.com/KernelTeam/GitKernelBuild">GitKernelBuild</a></p>

<!--more-->


<h2>Build kernel</h2>

<h4>Checkout upstream kernel</h4>

<pre><code>$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
$ cd linux
$ git checkout TAG/COMMIT  # up on your case, ex: git checkout v3.17-rc5
</code></pre>

<h4>Copy default config</h4>

<pre><code>$ cp /boot/config-`uname -r` .config
$ make oldconfig
$ # (optional) change your kernel flavor continue by 'make menuconfig'
$ #            in my case I skip that simply want to build latest kernel
</code></pre>

<h4>Make kernel packages</h4>

<pre><code>$ make -j `getconf _NPROCESSORS_ONLN` deb-pkg LOCALVERSION=-harry
</code></pre>

<p>now wait and grab a coffee, it takes time
after then you will see couple <em>.deb</em> file in upper folder</p>

<pre><code>$ ls -lh ../*.deb | awk '{print $5, "\t", $9}'
944K   ../linux-firmware-image-3.17.0-rc5-harry_3.17.0-rc5-harry-3_amd64.deb
6.4M   ../linux-headers-3.17.0-rc5-harry_3.17.0-rc5-harry-3_amd64.deb
353M   ../linux-image-3.17.0-rc5-harry_3.17.0-rc5-harry-3_amd64.deb
35M    ../linux-image-3.17.0-rc5-harry-dbg_3.17.0-rc5-harry-3_amd64.deb
750K   ../linux-libc-dev_3.17.0-rc5-harry-3_amd64.deb
</code></pre>

<h4>Install kernel packages</h4>

<pre><code>$ sudo dpkg -i ../linux-image-3.17.0-rc5-harry_3.17.0-rc5-harry-3_amd64.deb
$ sudo dpkg -i ../linux-headers-3.17.0-rc5-harry_3.17.0-rc5-harry-3_amd64.deb
</code></pre>

<p>once done, reboot then cross fingers</p>

<pre><code>$ sudo reboot
</code></pre>

<h4>Remove kernel packages</h4>

<p>You might want to remove customized kernel</p>

<pre><code>$ dpkg -l | grep harry
ii  linux-headers-3.17.0-rc5-harry                        3.17.0-rc5-harry-3                                  amd64        Linux kernel headers for 3.17.0-rc5-harry on amd64
ii  linux-image-3.17.0-rc5-harry                          3.17.0-rc5-harry-3                                  amd64        Linux kernel, version 3.17.0-rc5-harry
$ sudo dpkg --purge linux-headers-3.17.0-rc5-harry
$ sudo dpkg --purge linux-image-3.17.0-rc5-harry
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Performance Tools]]></title>
    <link href="http://gs0622.github.io/blog/2014/09/17/linux-performance-tools/"/>
    <updated>2014-09-17T18:27:04+08:00</updated>
    <id>http://gs0622.github.io/blog/2014/09/17/linux-performance-tools</id>
    <content type="html"><![CDATA[<p><a href="http://www.brendangregg.com/">Brendan Gregg</a> 於今年八月在<a href="http://events.linuxfoundation.org/events/linuxcon-north-america">LinuxCon</a>所給的演說，內容涵蓋high-level overview到常用基本指令可讓工程師知道如何分析系統效能瓶頸。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/38175637" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/brendangregg/linux-performance-tools" title="Linux Performance Tools" target="_blank">Linux Performance Tools</a> </strong> from <strong><a href="http://www.slideshare.net/brendangregg" target="_blank">brendangregg</a></strong> </div></p>

<!--more-->


<p>讀者可從基本的uptime, top, ps, vmstat, mpstat, free，到進階練習strace/ltrace, tcpdump, netstat, nicstat, pidstat, iotop, slabtop &hellip;etc.</p>

<p>尤其開頭第二頁的big picture做得相當棒，可以當成cheat sheet
<img class="http <a" src="href="http://www.brendangregg.com/Perf/linux_observability_tools.png">http://www.brendangregg.com/Perf/linux_observability_tools.png</a>&#8221; width=&#8221;600&#8221; height=&#8221;500&#8221; title=&#8221;linux_observability_tools&#8221; ></p>

<p><strong>SIDE NOTE</strong>: 緣起於我想了解目前的build machine是CPU bound, memory bound, I/O bound, 我用了vmstat, top, free, tmux不斷的實驗與觀察，輾轉又發現這篇投影片。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Administration Notes]]></title>
    <link href="http://gs0622.github.io/blog/2014/09/10/linux-administration-notes/"/>
    <updated>2014-09-10T11:28:23+08:00</updated>
    <id>http://gs0622.github.io/blog/2014/09/10/linux-administration-notes</id>
    <content type="html"><![CDATA[<p>Here is a memo of Linux workstation administration FAQs</p>

<!--more-->


<h2>Add new hard disk</h2>

<h4>Find new disk to setup</h4>

<pre><code>$ sudo fdisk -l
</code></pre>

<p><img src="/images/20140910_list_partition.png" width="600" height="500" title="find new disk to setup" ></p>

<h4>Create extend/logical partition</h4>

<pre><code>Command: n -&gt; e -&gt; enter (default) -&gt; enter (default)
</code></pre>

<p><img src="/images/20140910_ext_partition.png" width="600" height="500" title="create extended partition" ></p>

<pre><code>Command: n -&gt; l -&gt; enter (default) -&gt; enter (default)
</code></pre>

<p><img src="/images/20140910_logical_partition.png" width="600" height="500" title="create logical partition" ></p>

<h4>Exame then write partition table to disk</h4>

<pre><code>Command: p (print) -&gt; w (write)
</code></pre>

<p><img src="/images/20140910_write_table.png" width="600" height="500" title="exame then write partition table" ></p>

<h4>Format new disk to ext4</h4>

<pre><code>$ sudo mkfs.ext4 /dev/sdb5  # Notice! change sdb to sdX depend on your case
</code></pre>

<p><img src="/images/20140910_format_disk.png" width="600" height="500" title="exame partition table" ></p>

<h4>Mount new disk</h4>

<pre><code>$ mkdir -p /mydisk
$ chmod 777 /mydisk
$ mount -t ext4 /dev/sdb5 /mydisk
</code></pre>

<h4>Add disk into fstab by UUID</h4>

<pre><code>$ sudo blkid
$ sudo vim /etc/fstab   # add 128-bit UUID of /dev/sdb5 into last line
$ tail -n 1 /etc/fstab
UUID=a1cf9f6e-dxxxx-xxxx-xxxx-xxxxxxx1eccf /mydisk  ext4    errors=remount-ro   0   1
</code></pre>

<p><img src="/images/20140910_find_uuid.png" width="600" height="500" title="find uuid" ></p>

<h2>Evaluate disk I/O performance</h2>

<h4>read benchmark</h4>

<pre><code>$ sudo hdparm -Tt /dev/sdb
/dev/sdb:
 Timing cached reads:   30414 MB in  1.99 seconds = 15289.37 MB/sec
 Timing buffered disk reads: 1046 MB in  3.00 seconds = 348.23 MB/sec
$ sudo hdparm -Tt --direct /dev/sdb
/dev/sdb:
 Timing O_DIRECT cached reads:   996 MB in  2.00 seconds = 497.87 MB/sec
 Timing O_DIRECT disk reads: 1444 MB in  3.00 seconds = 480.71 MB/sec
</code></pre>

<p>The <strong>-T</strong> is for <strong>cached read test</strong> while <strong>-t</strong> is for <strong>buffered read</strong>.
Second example with <strong>&ndash;direct</strong> which means assigned O_DIRECT flag in test</p>

<h4>write benchmark</h4>

<pre><code>$ dd if=/dev/zero of=/tmp/output conv=fdatasync bs=4k count=1M; rm -f /tmp/outut
1048576+0 records in
1048576+0 records out
4294967296 bytes (4.3 GB) copied, 32.0625 s, 134 MB/s
$ dd if=/dev/zero of=/ssd/output conv=fdatasync bs=4k count=1M; rm -f /ssd/output
1048576+0 records in
1048576+0 records out
4294967296 bytes (4.3 GB) copied, 8.62645 s, 498 MB/s
</code></pre>

<p>First example I tested my system disk whick is 3.5&#8221; HDD, while second one I tested on SSD.</p>
]]></content>
  </entry>
  
</feed>
