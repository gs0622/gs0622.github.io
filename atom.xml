<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Harry's Graffiti]]></title>
  <link href="http://gs0622.github.io/atom.xml" rel="self"/>
  <link href="http://gs0622.github.io/"/>
  <updated>2014-08-29T15:01:40+08:00</updated>
  <id>http://gs0622.github.io/</id>
  <author>
    <name><![CDATA[Harry Pan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git FAQ]]></title>
    <link href="http://gs0622.github.io/blog/2014/08/29/git-faq/"/>
    <updated>2014-08-29T13:54:49+08:00</updated>
    <id>http://gs0622.github.io/blog/2014/08/29/git-faq</id>
    <content type="html"><![CDATA[<p>I write this FAQ list for git problems, usually you can google on stackoverflow or somewhere&hellip;</p>

<h2>Change user.name/email on local repository</h2>

<p>Sometimes you want to have different user name and email to override git global setting.</p>

<pre><code>$ git config user.name harrypan
$ git config user.email gs0622@gmail.com
</code></pre>

<p>Also, you can review it in local git config</p>

<pre><code>$ tail -3 .git/config
[user]
    name = harrypan
    email = harrypan
</code></pre>

<h2>Rollback remote git repository</h2>

<p>Sometimes you decide to rollback couple commits in remote without revert then push, you can try below tips, however it assumes your local and remote repository are synced.</p>

<h3>Hard reset commits in local repository</h3>

<pre><code>$ git reset --hard HEAD~n
</code></pre>

<p>Here &lsquo;n&rsquo; refer to commit numbers you want to reset, in case one or two commits you can also use HEAD or HEAD^.</p>

<h3>Force push onto remote</h3>

<pre><code>$ git push -f
</code></pre>

<h2>GitHub credential helper</h2>

<p>Says you have repositories on GitHub, default/preferred protocol is https, you might be annoyed every push need to input user/password, using credential helper could help you for a period not need credential input</p>

<h3>With git 1.7.9 and later</h3>

<pre><code>$ git config --global credential.helper cache
</code></pre>

<p>Here its default timeout is 15 min, or you can select a longer time suggested by GitHub help</p>

<pre><code>$ git config --global credential.helper "cache --timeout=3600"
</code></pre>

<h2>With git before 1.7.9, or any version</h2>

<p>I don&rsquo;t prefer those ways for personal flavor, you can refer to <a href="http://stackoverflow.com/questions/5343068/is-there-a-way-to-skip-password-typing-when-using-https-github">Is there a way to skip password typing when using https:// github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromium OS Build Notes]]></title>
    <link href="http://gs0622.github.io/blog/2014/08/27/chromium-os-build-notes/"/>
    <updated>2014-08-27T20:01:09+08:00</updated>
    <id>http://gs0622.github.io/blog/2014/08/27/chromium-os-build-notes</id>
    <content type="html"><![CDATA[<p>Basically this is short notes about building Chromium OS (a.k.a Chrome OS), all refer to <a href="http://www.chromium.org/chromium-os/developer-guide">Chromium OS Developer Guide</a></p>

<h2>Source</h2>

<p>TBD</p>

<h2>Build</h2>

<h3>enter chroot</h3>

<pre><code>$ ./chromite/bin/cros_sdk
</code></pre>

<h3>board select</h3>

<pre><code>$ export BOARD=x86-generic
$ ./setup_board --board=${BOARD}
$ ./build_packages --board=${BOARD}
$ ./build_image --board=${BOARD} --noenable_rootfs_verification dev
</code></pre>

<p></code></p>

<h2>Download</h2>

<p>TBD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MOOC: Extend You Passion in Career]]></title>
    <link href="http://gs0622.github.io/blog/2014/08/12/mooc-extend-you-passion-in-career/"/>
    <updated>2014-08-12T18:05:17+08:00</updated>
    <id>http://gs0622.github.io/blog/2014/08/12/mooc-extend-you-passion-in-career</id>
    <content type="html"><![CDATA[<p>I resigned and studied at home for couple months, I self-studied from MIT OCW to MOOC.
Recently I found this article is a good summary for MOOC resource (in Mandarin) that you could evaluate, depend on your willing and passion.</p>

<p><a href="http://www.thenewslens.com/post/36571/">MOOC不止可汗學院、Coursera和edX：更多大規模開放在線課程介紹</a></p>

<p>In this article, you could pick the MOOC resource in knowledge or in practice, I basically took MIT OCW, Cousera, Udacity, edX, Khan Academy &hellip;etc.
I love their passion and learn much that I seldom cared about while I was busy.
Take the LFS101x, Introduction to Linux of edX, as example, I enjoyed it to review my Linux domain knowledge.
There are 18 chapters, depth from beginner to expert, I took time watching it and gain knowledge.</p>

<p>In a nuts shell, take a short time to review your career, interest, passion, then make some decision when you&rsquo;re available.
It&rsquo;s up to you, your passion to find something to die for, no matter how to choose for life or work.</p>

<p>-Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colorgcc: Color Your Compilation Output]]></title>
    <link href="http://gs0622.github.io/blog/2014/08/09/hello/"/>
    <updated>2014-08-09T17:42:31+08:00</updated>
    <id>http://gs0622.github.io/blog/2014/08/09/hello</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re heavy coder, I believe you will like <a href="http://schlueters.de/colorgcc.html">colorgcc</a>, this tiny script saves your time on digging comlilation errors and warnings.
Like my example below.</p>

<pre>
harrypan@harrypan-E6440:~/workspace$ gcc -g -Wall CountInversion.c
CountInversion.c: In function ‘Merge’:
CountInversion.c:<font color="blue">23</font><font color="red">:1: error: expected ‘;’ before ‘}’ token</font>
CountInversion.c:<font color="blue">23</font><font color="yellow">:1: warning: control reaches end of non-void function [-Wreturn-type]</font>
harrypan@harrypan-E6440:~/workspace$
</pre>


<p>On ubuntu, you can easily get the colorgcc by <code>sudo apt-get install colorgcc</code>, follow by review and build symbolic links.</p>

<ol>
<li>Review $PATH variable, make sure <code>/usr/local/bin</code> is prior than <code>/usb/bin</code>, which is my installed gcc path</li>
</ol>


<pre>
harrypan@harrypan-E6440:~$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
</pre>


<ol>
<li>Make some symbolic links under /usr/local/bin to fulfill your need</li>
</ol>


<pre>
cd /usr/local/bin
sudo ln -s /usr/bin/colorgcc gcc
sudo ln -s /usr/bin/colorgcc g++
</pre>


<p>Okay, now enjoy your rest of coding.</p>
]]></content>
  </entry>
  
</feed>
